<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: marc
 * Date: 16/11/18
 * Time: 16:03
 */

namespace App\Ipolitic\Nawpcore\Fields;

use App\Ipolitic\Nawpcore\Components\Field;
use App\Ipolitic\Nawpcore\Interfaces\FieldInterface;
use App\Ipolitic\Nawpcore\Views\Date;

/**
 * Class DateField
 * @package App\Ipolitic\Nawpcore\Fields
 */
class DateField extends Field implements FieldInterface
{
    /**
     * @var array
     */
    public $prop = [
        "message"       => "",
        "value"         => "",
        "column"        => "",
        "placeholder"   => "",
        "icon"          => "",
        "range"         => [null, null]
    ];
    /**
     * @return string
     */
    public function checkValidity(): string
    {
        $undoValue = function () {
            is_int($this->value) ?
            is_string($this->value = (new \DateTime())
                ->setTimestamp(0)
                ->format("Y-m-d H:i:s"))
            :
            true;
        };
        $parsedTime = is_int($this->value) ? $this->value : strtotime($this->value);
        // convert to browsers compatible format
        $gotDateTime = new \DateTime();
        $gotDateTime->setTimestamp($parsedTime);
        $this->set($gotDateTime->format("Y-m-d"));
        // check errors
        if ($parsedTime === false) {
            $undoValue();
            return  "Given value was not a valid date.";
        }
        // test if in range
        if ((($this->prop["range"][0] === null) || ($parsedTime >= $this->prop["range"][0])) &&
            (($this->prop["range"][0] === null) || ($parsedTime <= $this->prop["range"][1]))) {
            $undoValue();
            return   "";
        } else {
            $dateTime1 = new \DateTime();
            $dateTime1->setTimestamp($this->prop["range"][0]);
            $dateTime2 = new \DateTime();
            $dateTime2->setTimestamp($this->prop["range"][1]);
            $undoValue();
            return   ucfirst($this->column) . " must be in range : [" .
               $dateTime1->format("Y-m-d") . "," .
               $dateTime2->format("Y-m-d") ."].";
        }
    }


    public function save(): void
    {
        parent::save(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array
     */
    public function getViews(): array
    {
        return [Date::class => $this->prop];
    }
}
